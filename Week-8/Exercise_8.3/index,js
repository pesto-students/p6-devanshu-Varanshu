class Node {
    constructor(data) {
        this.value = data;
        this.right = null;
        this.left = null;
    }
}

function levelOrderTraversal(root) {
    let output = [];
    let depth = getDepth(root);
    for (let i = 0; i <= depth; i++) {
        let values = getCurrentLevel(root, i);
        if (values !== undefined)
            if (typeof values === 'number') output.push([values]);
            else output.push(values)
    }
    return output;
}

function getDepth(node) {
    if (node === null) return 0;
    else {
        let lDepth = getDepth(node.left);
        let rDepth = getDepth(node.right);
        if (lDepth > rDepth) {
            return lDepth + 1;
        } else {
            return rDepth + 1;
        }
    }
}

function getCurrentLevel(node, level) {
    if (node === null) return;
    if (level === 1) return node.value;
    else if (level > 1) {
        let values = [];
        let leftNode = getCurrentLevel(node.left, level - 1);
        let rightNode = getCurrentLevel(node.right, level - 1);
        if (leftNode !== undefined) values.push(leftNode);
        if (rightNode !== undefined) values.push(rightNode);
        return values.flat(level);
    }
}

let root = new Node(3);
root.left = new Node(9);
root.right = new Node(20);
root.right.left = new Node(15);
root.right.right = new Node(7);
console.log(levelOrderTraversal(root));

root = new Node(1)
console.log(levelOrderTraversal(root));

root = new Node()
console.log(levelOrderTraversal(root));